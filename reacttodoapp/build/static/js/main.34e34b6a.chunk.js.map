{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","inputRef","React","createRef","useEffect","current","focus","btnText","placeholder","className","onSubmit","event","preventDefault","id","Math","floor","random","text","ref","type","name","Todo","setEdit","updateTodo","todos","map","todo","index","isComplete","onClick","completeTodo","removeTodo","TodoList","setTodos","isCompleted","filter","todoId","newValue","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAqCeA,MAnCf,SAAkBC,GAAQ,IAAD,EAEjBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAFxB,mBAGfC,GAHe,UAGJC,IAAMC,aAEvBC,qBAAU,WACNH,EAASI,QAAQC,WAGrB,IAUIC,EAAU,WACVC,EAAc,gBAKlB,OAJIX,EAAME,OACNQ,EAAU,cACVC,EAAc,sBAGd,uBAAMC,UAAU,YAAYC,SAjBX,SAACC,GAClBA,EAAMC,iBACNf,EAAMa,SAAS,CACXG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMhB,EAASI,QAAQL,QAE3BC,EAASI,QAAQL,MAAQ,IAWzB,UACI,uBAAOkB,IAAKjB,EAAUkB,KAAK,OACvBX,YAAaA,EACbY,KAAK,OAAOX,UAAU,eAC1B,wBAAQA,UAAU,cAAlB,SAAiCF,Q,cCqB9Bc,MAhDf,SAAcxB,GAAQ,IAAD,EAEOC,mBACpB,CACIe,GAAI,KACJb,MAAO,KALE,mBAEVD,EAFU,KAEJuB,EAFI,KAgBjB,OAAIvB,EAAKc,GAED,cAAC,EAAD,CAAUd,KAAMA,EAAMW,SAVT,SAACV,GAClBH,EAAM0B,WAAWxB,EAAKc,GAAIb,GAC1BsB,EAAQ,CACJT,GAAI,KACJb,MAAO,QAYP,8BACKH,EAAM2B,MAAMC,KAAI,SAACC,EAAMC,GACpB,OACI,sBAAKlB,UAAWiB,EAAKE,WAAa,oBAAsB,WAAxD,UAGI,qBACIC,QAAS,WAAQhC,EAAMiC,aAAaJ,EAAKb,KAD7C,SACqDa,EAAKT,MADhDS,EAAKb,IAEf,sBAAKJ,UAAU,QAAf,UACI,cAAC,IAAD,CACIA,UAAU,cACVoB,QAAS,WAAQhC,EAAMkC,WAAWL,EAAKb,OAC3C,cAAC,IAAD,CACIJ,UAAU,YACVoB,QAAS,WAAQP,EAAQ,CAAET,GAAIa,EAAKb,GAAIb,MAAO0B,EAAKT,eAVvDS,EAAKC,aCoBvBK,MAjDf,SAAkBnC,GAAQ,IAAD,EACKC,mBAAS,IADd,mBACd0B,EADc,KACPS,EADO,KAqCrB,OACI,gCACI,4DACA,cAAC,EAAD,CAAUvB,SArCF,SAACgB,GACRA,EAAKT,MAGVgB,EAAS,CAACP,GAAF,mBAAWF,QAkCf,cAAC,EAAD,CAAMA,MAAOA,EACTM,aApBS,SAACjB,GAClBoB,EAAST,EAAMC,KAAI,SAACC,GAIhB,OAHIA,EAAKb,KAAOA,IACZa,EAAKQ,aAAeR,EAAKQ,aAEtBR,OAgBHK,WAZO,SAAClB,GAChBoB,EAAST,EAAMW,QAAO,SAACT,EAAMC,GACzB,OAAOD,EAAKb,KAAOA,OAWfU,WAlCO,SAACa,EAAQC,GACnBA,EAASpB,MAGdgB,EAAST,EAAMC,KAAI,SAACC,EAAMC,GAItB,OAHIS,IAAWV,EAAKb,KAChBa,EAAKT,KAAOoB,EAASpB,MAElBS,a,MCTJY,MARf,WACE,OACE,qBAAK7B,UAAU,WAAf,SACE,cAAC,EAAD,OCHN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.34e34b6a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = \r\n        useState(props.edit ? props.edit.value : \"\");\r\n    const inputRef = React.createRef();\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: inputRef.current.value\r\n        });\r\n        inputRef.current.value = \"\";\r\n        //setInput(\"\");\r\n    }\r\n\r\n    let btnText = \"Add todo\";\r\n    let placeholder = \"Add a todo...\";\r\n    if (props.edit) {\r\n        btnText = \"Update todo\";\r\n        placeholder = \"Update the todo...\";\r\n    }\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <input ref={inputRef} type=\"text\" \r\n                placeholder={placeholder}\r\n                name=\"text\" className=\"todo-input\"/>\r\n            <button className=\"todo-button\">{btnText}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from \"react\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction Todo(props) {\r\n\r\n    const [edit, setEdit] = useState(\r\n        {\r\n            id: null,\r\n            value: \"\"\r\n        });\r\n\r\n    const submitUpdate = (value) => {\r\n        props.updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: \"\"\r\n        });\r\n    }\r\n\r\n    if (edit.id) {\r\n        return (\r\n            <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n        );\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <div>\r\n                {props.todos.map((todo, index) => {\r\n                    return (\r\n                        <div className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n                            key={todo.index}>\r\n\r\n                            <div key={todo.id}\r\n                                onClick={() => { props.completeTodo(todo.id) }}>{todo.text}</div>\r\n                            <div className=\"icons\">\r\n                                <RiCloseCircleLine\r\n                                    className=\"delete-icon\"\r\n                                    onClick={() => { props.removeTodo(todo.id) }} />\r\n                                <TiEdit\r\n                                    className=\"edit-icon\"\r\n                                    onClick={() => { setEdit({ id: todo.id, value: todo.text }) }} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, {useState} from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList(props) {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = (todo) => {\r\n        if (!todo.text ) {\r\n            return;\r\n        }\r\n        setTodos([todo, ...todos]);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text ) {\r\n            return;\r\n        }\r\n        setTodos(todos.map((todo, index) => {\r\n            if (todoId === todo.id) {\r\n                todo.text = newValue.text;\r\n            }\r\n            return todo;\r\n        }));\r\n    }\r\n\r\n    const completeTodo = (id) => {\r\n        setTodos(todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                todo.isCompleted = !todo.isCompleted;\r\n            }\r\n            return todo;\r\n        }));\r\n    }\r\n\r\n    const removeTodo = (id) => {\r\n        setTodos(todos.filter((todo, index) => {\r\n            return todo.id !== id;\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import TodoList from \"./components/TodoList\";\nimport \"./App.css\";\n\n// https://youtu.be/E1E08i2UJGI?list=PLd6Igc0Cu9vUwgcEdFOfQN1m4nq6pU3iX&t=2394\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}